{"version":3,"sources":["constants.js","utils.js","Components/Link.js","Components/LinkList.js","Components/CreateLink.js","Components/Header.js","Components/Login.js","Components/Search.js","Components/App.js","serviceWorker.js","index.js"],"names":["AUTH_TOKEN","timeDifferenceForDate","date","current","previous","milliSecondsPerMinute","milliSecondsPerHour","milliSecondsPerDay","milliSecondsPerMonth","milliSecondsPerYear","elapsed","Math","round","timeDifference","Date","getTime","VOTE_MUTATION","gql","Link","props","link","authToken","localStorage","getItem","orderBy","createdAt","useMutation","variables","linkId","id","update","cache","vote","data","updatedLinks","readQuery","query","FEED_QUERY","take","skip","feed","links","map","feedLink","votes","writeQuery","className","index","style","cursor","onClick","description","url","length","postedBy","name","NEW_LINKS_SUBSCRIPTION","NEW_VOTES_SUBSCRIPTION","getLinksToRender","isNewPage","rankedLinks","slice","sort","l1","l2","getQueryVariables","page","LinkList","history","useHistory","location","pathname","includes","pageIndexParams","split","parseInt","pageIndex","useQuery","loading","error","subscribeToMore","document","updateQuery","prev","subscriptionData","newLink","find","Object","assign","count","__typename","JSON","stringify","push","nextPage","CREATE_LINK_MUTATION","CreateLink","useState","formState","setFormState","post","onCompleted","createLink","onSubmit","e","preventDefault","value","onChange","target","type","placeholder","Header","to","removeItem","SIGNUP_MUTATION","LOGIN_MUTATION","Login","login","email","password","setItem","token","signup","FEED_SEARCH_QUERY","Search","searchFilter","setSearchFilter","useLazyQuery","executeSearch","filter","App","exact","path","render","component","Boolean","window","hostname","match","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","wsLink","WebSocketLink","options","reconnect","connectionParams","getMainDefinition","kind","operation","concat","client","ApolloClient","InMemoryCache","ReactDOM","ApolloProvider","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qSAAaA,EAAa,a,SC4BnB,SAASC,EAAsBC,GAGpC,OA/BF,SAAwBC,EAASC,GAC/B,IAAMC,EAAwB,IACxBC,EAAsBD,KACtBE,EAAqBD,MACrBE,EAAuBD,OACvBE,EAAsBF,QAEtBG,EAAUP,EAAUC,EAE1B,OAAIM,EAAUL,IACL,WAGLK,EAAUL,EACL,sBACEK,EAAUJ,EACZK,KAAKC,MAAMF,EAAUL,GAAyB,WAC5CK,EAAUH,EACZI,KAAKC,MAAMF,EAAUJ,GAAuB,SAC1CI,EAAUF,EACZG,KAAKC,MAAMF,EAAUH,GAAsB,YACzCG,EAAUD,EACZE,KAAKC,MAAMF,EAAUF,GAAwB,UAE7CG,KAAKC,MAAMF,EAAUD,GAAuB,aAO9CI,EAFK,IAAIC,MAAOC,UACP,IAAID,KAAKZ,GAAMa,W,2BCxB3BC,EAAgBC,YAAH,2QAgGJC,EA7EF,SAACC,GAAW,IACfC,EAASD,EAATC,KACFC,EAAYC,aAAaC,QAAQvB,GAIjCwB,EAAU,CAAEC,UAAW,QANP,EAQPC,YAAYV,EAAe,CACxCW,UAAW,CACTC,OAAQR,EAAKS,IAEfC,OAJwC,SAIjCC,EAJiC,GAIL,IAAXC,EAAU,EAAlBC,KAAQD,KAUhBE,EATWH,EAAMI,UAAU,CAC/BC,MAAOC,EACPV,UAAW,CACTW,KFxCoB,EEyCpBC,KAZK,EAaLf,aALIgB,KASkBC,MAAMC,KAAI,SAACC,GACnC,OAAIA,EAASd,KAAOT,EAAKS,GAChB,2BACFc,GADL,IAEEC,MAAM,GAAD,mBAAMD,EAASC,OAAf,CAAsBZ,MAGxBW,KAGTZ,EAAMc,WAAW,CACfT,MAAOC,EACPJ,KAAM,CACJO,KAAM,CACJC,MAAOP,IAGXP,UAAW,CACTW,KFhEoB,EEiEpBC,KApCK,EAqCLf,gBAlCDQ,EARe,oBA+CtB,OACE,sBAAKc,UAAU,uBAAf,UACE,sBAAKA,UAAU,oBAAf,UACE,uBAAMA,UAAU,OAAhB,UAAwB3B,EAAM4B,MAAQ,EAAtC,OACC1B,GACC,qBACEyB,UAAU,eACVE,MAAO,CAAEC,OAAQ,WACjBC,QAASlB,EAHX,uBASJ,sBAAKc,UAAU,MAAf,UACE,gCACG1B,EAAK+B,YADR,KACuB/B,EAAKgC,IAD5B,OAGC/B,GACC,sBAAKyB,UAAU,kBAAf,UACG1B,EAAKwB,MAAMS,OADd,cACiC,IAC9BjC,EAAKkC,SAAWlC,EAAKkC,SAASC,KAAO,UAAW,IAChDtD,EAAsBmB,EAAKK,qBCxF3BY,EAAapB,YAAH,kcA6BjBuC,EAAyBvC,YAAH,oQAqBtBwC,EAAyBxC,YAAH,oWA2BtByC,EAAmB,SAACC,EAAW1B,GACnC,GAAI0B,EACF,OAAO1B,EAAKO,KAAKC,MAEnB,IAAMmB,EAAc3B,EAAKO,KAAKC,MAAMoB,QAIpC,OAHAD,EAAYE,MACV,SAACC,EAAIC,GAAL,OAAYA,EAAGpB,MAAMS,OAASU,EAAGnB,MAAMS,UAElCO,GAGHK,EAAoB,SAACN,EAAWO,GAIpC,MAAO,CAAE5B,KAFIqB,EH/Fe,EG+Fc,IAE3BpB,KAHFoB,EH9Fe,GG8FFO,EAAO,GAAsB,EAGlC1C,QADL,CAAEC,UAAW,UAoGhB0C,EAhGE,WACf,IAAMC,EAAUC,cACVV,EAAYS,EAAQE,SAASC,SAASC,SAC1C,OAEIC,EAAkBL,EAAQE,SAASC,SAASG,MAChD,KAEIR,EAAOS,SACXF,EAAgBA,EAAgBpB,OAAS,IAGrCuB,EAAYV,EHhHU,GGgHFA,EAAO,GAAsB,EAZlC,EAmBjBW,YAASxC,EAAY,CACvBV,UAAWsC,EAAkBN,EAAWO,KALxCjC,EAfmB,EAenBA,KACA6C,EAhBmB,EAgBnBA,QACAC,EAjBmB,EAiBnBA,MACAC,EAlBmB,EAkBnBA,gBA6BF,OAxBAA,EAAgB,CACdC,SAAUzB,EACV0B,YAAa,SAACC,EAAD,GAAiC,IAAxBC,EAAuB,EAAvBA,iBACpB,IAAKA,EAAiBnD,KAAM,OAAOkD,EACnC,IAAME,EAAUD,EAAiBnD,KAAKoD,QAItC,OAHeF,EAAK3C,KAAKC,MAAM6C,MAC7B,qBAAGzD,KAAgBwD,EAAQxD,MAEVsD,EAEZI,OAAOC,OAAO,GAAIL,EAAM,CAC7B3C,KAAM,CACJC,MAAM,CAAE4C,GAAH,mBAAeF,EAAK3C,KAAKC,QAC9BgD,MAAON,EAAK3C,KAAKC,MAAMY,OAAS,EAChCqC,WAAYP,EAAK3C,KAAKkD,iBAM9BV,EAAgB,CACdC,SAAUxB,IAIV,qCACGqB,GAAW,2CACXC,GAAS,8BAAMY,KAAKC,UAAUb,EAAO,KAAM,KAC3C9C,GACC,qCACGyB,EAAiBC,EAAW1B,GAAMS,KACjC,SAACtB,EAAM2B,GAAP,OACE,cAAC,EAAD,CAEE3B,KAAMA,EACN2B,MAAOA,EAAQ6B,GAFVxD,EAAKS,OAMf8B,GACC,sBAAKb,UAAU,oBAAf,UACE,qBACEA,UAAU,cACVI,QAAS,WACHgB,EAAO,GACTE,EAAQyB,KAAR,eAAqB3B,EAAO,KAJlC,sBAUA,qBACEpB,UAAU,UACVI,QAAS,WACP,GACEgB,GACAjC,EAAKO,KAAKiD,MHnLA,EGoLV,CACA,IAAMK,EAAW5B,EAAO,EACxBE,EAAQyB,KAAR,eAAqBC,MAR3B,4BCzKRC,EAAuB9E,YAAH,iNA8FX+E,EAjFI,WACjB,IAAM5B,EAAUC,cADO,EAEW4B,mBAAS,CACzC9C,YAAa,GACbC,IAAK,KAJgB,mBAEhB8C,EAFgB,KAELC,EAFK,OAMFzE,YAAYqE,EAAsB,CACrDpE,UAAW,CACTwB,YAAa+C,EAAU/C,YACvBC,IAAK8C,EAAU9C,KAEjBtB,OAAQ,SAACC,EAAD,GAAgC,IAAdqE,EAAa,EAArBnE,KAAQmE,KAGlB5E,EAAU,CAAEC,UAAW,QAEvBQ,EAAOF,EAAMI,UAAU,CAC3BC,MAAOC,EACPV,UAAW,CACTW,KJrCoB,EIsCpBC,KAPS,EAQTf,aAIJO,EAAMc,WAAW,CACfT,MAAOC,EACPJ,KAAM,CACJO,KAAM,CACJC,MAAM,CAAE2D,GAAH,mBAAYnE,EAAKO,KAAKC,UAG/Bd,UAAW,CACTW,KJnDoB,EIoDpBC,KArBS,EAsBTf,cAIN6E,YAAa,kBAAMjC,EAAQyB,KAAK,aAjC3BS,EANgB,oBAyCvB,OACE,8BACE,uBACEC,SAAU,SAACC,GACTA,EAAEC,iBACFH,KAHJ,UAME,sBAAKxD,UAAU,uBAAf,UACE,uBACEA,UAAU,MACV4D,MAAOR,EAAU/C,YACjBwD,SAAU,SAACH,GAAD,OACRL,EAAa,2BACRD,GADO,IAEV/C,YAAaqD,EAAEI,OAAOF,UAG1BG,KAAK,OACLC,YAAY,+BAEd,uBACEhE,UAAU,MACV4D,MAAOR,EAAU9C,IACjBuD,SAAU,SAACH,GAAD,OACRL,EAAa,2BACRD,GADO,IAEV9C,IAAKoD,EAAEI,OAAOF,UAGlBG,KAAK,OACLC,YAAY,4BAGhB,wBAAQD,KAAK,SAAb,0BChCOE,EAzDA,WACb,IAAM3C,EAAUC,cACVhD,EAAYC,aAAaC,QAAQvB,GACvC,OACE,sBAAK8C,UAAU,yCAAf,UACE,sBAAKA,UAAU,wBAAf,UACE,qBAAKA,UAAU,UAAf,yBACA,cAAC,IAAD,CAAMkE,GAAG,IAAIlE,UAAU,yBAAvB,iBAGA,qBAAKA,UAAU,MAAf,eACA,cAAC,IAAD,CAAMkE,GAAG,OAAOlE,UAAU,yBAA1B,iBAGA,qBAAKA,UAAU,MAAf,eACA,cAAC,IAAD,CACEkE,GAAG,UACHlE,UAAU,yBAFZ,oBAMCzB,GACC,sBAAKyB,UAAU,OAAf,UACE,qBAAKA,UAAU,MAAf,eACA,cAAC,IAAD,CACEkE,GAAG,UACHlE,UAAU,yBAFZ,0BASN,qBAAKA,UAAU,kBAAf,SACGzB,EACC,qBACEyB,UAAU,oBACVI,QAAS,WACP5B,aAAa2F,WAAWjH,GACxBoE,EAAQyB,KAAR,MAJJ,oBAUA,cAAC,IAAD,CACEmB,GAAG,SACHlE,UAAU,yBAFZ,yBC7CJoE,EAAkBjG,YAAH,kPAgBfkG,EAAiBlG,YAAH,qLA2GLmG,EAhGD,WACZ,IAAMhD,EAAUC,cADE,EAEgB4B,mBAAS,CACzCoB,OAAO,EACPC,MAAO,GACPC,SAAU,GACVhE,KAAM,KANU,mBAEX2C,EAFW,KAEAC,EAFA,OASFzE,YAAYyF,EAAgB,CAC1CxF,UAAW,CACT2F,MAAOpB,EAAUoB,MACjBC,SAAUrB,EAAUqB,UAEtBlB,YAAa,YAAgB,IAAbgB,EAAY,EAAZA,MACd/F,aAAakG,QAAQxH,EAAYqH,EAAMI,OACvCrD,EAAQyB,KAAK,QAPVwB,EATW,sBAoBD3F,YAAYwF,EAAiB,CAC5CvF,UAAW,CACT4B,KAAM2C,EAAU3C,KAChB+D,MAAOpB,EAAUoB,MACjBC,SAAUrB,EAAUqB,UAEtBlB,YAAa,YAAiB,IAAdqB,EAAa,EAAbA,OACdpG,aAAakG,QAAQxH,EAAY0H,EAAOD,OACxCrD,EAAQyB,KAAK,QARV6B,EApBW,oBA+BlB,OACE,gCACE,oBAAI5E,UAAU,MAAd,SAAqBuE,EAAQ,QAAU,YACvC,sBAAKvE,UAAU,mBAAf,WACIoD,EAAUmB,OACV,uBACEX,MAAOR,EAAU3C,KACjBoD,SAAU,SAACH,GAAD,OACRL,EAAa,2BACRD,GADO,IAEV3C,KAAMiD,EAAEI,OAAOF,UAGnBG,KAAK,OACLC,YAAY,cAGhB,uBACEJ,MAAOR,EAAUoB,MACjBX,SAAU,SAACH,GAAD,OACRL,EAAa,2BACRD,GADO,IAEVoB,MAAOd,EAAEI,OAAOF,UAGpBG,KAAK,OACLC,YAAY,uBAEd,uBACEJ,MAAOR,EAAUqB,SACjBZ,SAAU,SAACH,GAAD,OACRL,EAAa,2BACRD,GADO,IAEVqB,SAAUf,EAAEI,OAAOF,UAGvBG,KAAK,WACLC,YAAY,8BAGhB,sBAAKhE,UAAU,WAAf,UACE,wBACEA,UAAU,qBACVI,QAASgD,EAAUmB,MAAQA,EAAQK,EAFrC,SAIGxB,EAAUmB,MAAQ,QAAU,mBAE/B,wBACEvE,UAAU,iBACVI,QAAS,SAACsD,GAAD,OACPL,EAAa,2BACRD,GADO,IAEVmB,OAAQnB,EAAUmB,UALxB,SASGnB,EAAUmB,MACP,6BACA,oC,SCpHRM,EAAoB1G,YAAH,2WAuDR2G,EA/BA,WAAO,IAAD,EACqB3B,mBAAS,IAD9B,mBACZ4B,EADY,KACEC,EADF,OAEeC,YAChCJ,GAHiB,mBAEZK,EAFY,KAEK/F,EAFL,KAEKA,KAGxB,OACE,qCACE,yCAEE,uBACE4E,KAAK,OACLF,SAAU,SAACH,GAAD,OAAOsB,EAAgBtB,EAAEI,OAAOF,UAE5C,wBACExD,QAAS,kBACP8E,EAAc,CACZrG,UAAW,CAAEsG,OAAQJ,MAH3B,mBAUD5F,GACCA,EAAKO,KAAKC,MAAMC,KAAI,SAACtB,EAAM2B,GAAP,OAClB,cAAC,EAAD,CAAoB3B,KAAMA,EAAM2B,MAAOA,GAA5B3B,EAAKS,WCjBXqG,EA7BH,kBACV,sBAAKpF,UAAU,aAAf,UACE,cAAC,EAAD,IACA,qBAAKA,UAAU,0BAAf,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CACEqF,OAAK,EACLC,KAAK,IACLC,OAAQ,kBAAM,cAAC,IAAD,CAAUrB,GAAG,cAG7B,cAAC,IAAD,CACEmB,OAAK,EACLC,KAAK,UACLE,UAAWtC,IAEb,cAAC,IAAD,CAAOmC,OAAK,EAACC,KAAK,SAASE,UAAWlB,IACtC,cAAC,IAAD,CAAOe,OAAK,EAACC,KAAK,UAAUE,UAAWV,IACvC,cAAC,IAAD,CAAOO,OAAK,EAACC,KAAK,OAAOE,UAAWnE,IACpC,cAAC,IAAD,CACEgE,OAAK,EACLC,KAAK,aACLE,UAAWnE,aClBDoE,QACa,cAA7BC,OAAOlE,SAASmE,UAEe,UAA7BD,OAAOlE,SAASmE,UAEhBD,OAAOlE,SAASmE,SAASC,MACvB,2D,WCAFC,EAAWC,YAAe,CAC9BC,IAAK,0BAGDC,EAAWC,aAAW,SAACC,EAAD,GAAqB,IAAfC,EAAc,EAAdA,QAC1BxB,EAAQnG,aAAaC,QAAQvB,GACnC,MAAO,CACLiJ,QAAQ,2BACHA,GADE,IAELC,cAAezB,EAAK,iBAAaA,GAAU,SAK3C0B,GAAS,IAAIC,IAAc,CAC/BP,IAAI,8BACJQ,QAAS,CACPC,WAAW,EACXC,iBAAkB,CAChBlI,UAAWC,aAAaC,QAAQvB,OAKhCoB,GAAOsD,iBACX,YAAgB,IAAbtC,EAAY,EAAZA,MAAY,EACeoH,YAAkBpH,GAAtCqH,EADK,EACLA,KAAMC,EADD,EACCA,UACd,MACW,wBAATD,GACc,iBAAdC,IAGJP,GACAL,EAASa,OAAOhB,IAGZiB,GAAS,IAAIC,IAAa,CAC9BzI,QACAW,MAAO,IAAI+H,MAGbC,IAAS1B,OACP,cAAC,IAAD,UACE,cAAC2B,EAAA,EAAD,CAAgBJ,OAAQA,GAAxB,SACE,cAAC,EAAD,QAGJ3E,SAASgF,eAAe,SDgElB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.0f30ce54.chunk.js","sourcesContent":["export const AUTH_TOKEN = 'auth-token';\r\nexport const LINKS_PER_PAGE = 5;\r\n","function timeDifference(current, previous) {\r\n  const milliSecondsPerMinute = 60 * 1000\r\n  const milliSecondsPerHour = milliSecondsPerMinute * 60\r\n  const milliSecondsPerDay = milliSecondsPerHour * 24\r\n  const milliSecondsPerMonth = milliSecondsPerDay * 30\r\n  const milliSecondsPerYear = milliSecondsPerDay * 365\r\n\r\n  const elapsed = current - previous\r\n\r\n  if (elapsed < milliSecondsPerMinute / 3) {\r\n    return 'just now'\r\n  }\r\n\r\n  if (elapsed < milliSecondsPerMinute) {\r\n    return 'less than 1 min ago'\r\n  } else if (elapsed < milliSecondsPerHour) {\r\n    return Math.round(elapsed / milliSecondsPerMinute) + ' min ago'\r\n  } else if (elapsed < milliSecondsPerDay) {\r\n    return Math.round(elapsed / milliSecondsPerHour) + ' h ago'\r\n  } else if (elapsed < milliSecondsPerMonth) {\r\n    return Math.round(elapsed / milliSecondsPerDay) + ' days ago'\r\n  } else if (elapsed < milliSecondsPerYear) {\r\n    return Math.round(elapsed / milliSecondsPerMonth) + ' mo ago'\r\n  } else {\r\n    return Math.round(elapsed / milliSecondsPerYear) + ' years ago'\r\n  }\r\n}\r\n\r\nexport function timeDifferenceForDate(date) {\r\n  const now = new Date().getTime()\r\n  const updated = new Date(date).getTime()\r\n  return timeDifference(now, updated)\r\n}","import React from 'react';\r\nimport { gql, useMutation } from '@apollo/client';\r\nimport { AUTH_TOKEN, LINKS_PER_PAGE } from '../constants';\r\nimport { timeDifferenceForDate } from '../utils';\r\nimport { FEED_QUERY } from './LinkList';\r\n\r\nconst VOTE_MUTATION = gql`\r\n  mutation VoteMutation($linkId: ID!) {\r\n    vote(linkId: $linkId) {\r\n      id\r\n      link {\r\n        votes {\r\n          id\r\n          user {\r\n            id\r\n          }\r\n        }\r\n      }\r\n      user {\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst Link = (props) => {\r\n  const { link } = props;\r\n  const authToken = localStorage.getItem(AUTH_TOKEN);\r\n\r\n  const take = LINKS_PER_PAGE;\r\n  const skip = 0;\r\n  const orderBy = { createdAt: 'desc' };\r\n\r\n  const [vote] = useMutation(VOTE_MUTATION, {\r\n    variables: {\r\n      linkId: link.id\r\n    },\r\n    update(cache, { data: { vote } }) {\r\n      const { feed } = cache.readQuery({\r\n        query: FEED_QUERY,\r\n        variables: {\r\n          take,\r\n          skip,\r\n          orderBy\r\n        }\r\n      });\r\n\r\n      const updatedLinks = feed.links.map((feedLink) => {\r\n        if (feedLink.id === link.id) {\r\n          return {\r\n            ...feedLink,\r\n            votes: [...feedLink.votes, vote]\r\n          };\r\n        }\r\n        return feedLink;\r\n      });\r\n\r\n      cache.writeQuery({\r\n        query: FEED_QUERY,\r\n        data: {\r\n          feed: {\r\n            links: updatedLinks\r\n          }\r\n        },\r\n        variables: {\r\n          take,\r\n          skip,\r\n          orderBy\r\n        }\r\n      });\r\n    }\r\n  });\r\n  return (\r\n    <div className=\"flex mt2 items-start\">\r\n      <div className=\"flex items-center\">\r\n        <span className=\"gray\">{props.index + 1}.</span>\r\n        {authToken && (\r\n          <div\r\n            className=\"ml1 gray f11\"\r\n            style={{ cursor: 'pointer' }}\r\n            onClick={vote}\r\n          >\r\n            ▲\r\n          </div>\r\n        )}\r\n      </div>\r\n      <div className=\"ml1\">\r\n        <div>\r\n          {link.description} ({link.url})\r\n        </div>\r\n        {authToken && (\r\n          <div className=\"f6 lh-copy gray\">\r\n            {link.votes.length} votes | by{' '}\r\n            {link.postedBy ? link.postedBy.name : 'Unknown'}{' '}\r\n            {timeDifferenceForDate(link.createdAt)}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Link;\r\n","import React from 'react';\r\nimport { gql, useQuery } from '@apollo/client';\r\nimport { useHistory } from 'react-router';\r\nimport { LINKS_PER_PAGE } from '../constants';\r\nimport Link from './Link';\r\n\r\nexport const FEED_QUERY = gql`\r\n  query FeedQuery(\r\n    $take: Int\r\n    $skip: Int\r\n    $orderBy: LinkOrderByInput\r\n  ) {\r\n    feed(take: $take, skip: $skip, orderBy: $orderBy) {\r\n      id\r\n      links {\r\n        id\r\n        url\r\n        description\r\n        postedBy {\r\n          id\r\n          name\r\n        }\r\n        votes {\r\n          id\r\n          user {\r\n            id\r\n          }\r\n        }\r\n        createdAt\r\n      }\r\n      count\r\n    }\r\n  }\r\n`;\r\n\r\nconst NEW_LINKS_SUBSCRIPTION = gql`\r\n  subscription {\r\n    newLink {\r\n      id\r\n      url\r\n      description\r\n      postedBy {\r\n        id\r\n        name\r\n      }\r\n      votes {\r\n        id\r\n        user {\r\n          id\r\n        }\r\n      }\r\n      createdAt\r\n    }\r\n  }\r\n`;\r\n\r\nconst NEW_VOTES_SUBSCRIPTION = gql`\r\n  subscription {\r\n    newVote {\r\n      id\r\n      link {\r\n        id\r\n        url\r\n        description\r\n        postedBy {\r\n          id\r\n          name\r\n        }\r\n        votes {\r\n          id\r\n          user {\r\n            id\r\n          }\r\n        }\r\n        createdAt\r\n      }\r\n      user {\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getLinksToRender = (isNewPage, data) => {\r\n  if (isNewPage) {\r\n    return data.feed.links;\r\n  }\r\n  const rankedLinks = data.feed.links.slice();\r\n  rankedLinks.sort(\r\n    (l1, l2) => l2.votes.length - l1.votes.length\r\n  );\r\n  return rankedLinks;\r\n};\r\n\r\nconst getQueryVariables = (isNewPage, page) => {\r\n  const skip = isNewPage ? (page - 1) * LINKS_PER_PAGE : 0;\r\n  const take = isNewPage ? LINKS_PER_PAGE : 100;\r\n  const orderBy = { createdAt: 'desc' };\r\n  return { take, skip, orderBy };\r\n};\r\n\r\nconst LinkList = () => {\r\n  const history = useHistory();\r\n  const isNewPage = history.location.pathname.includes(\r\n    'new'\r\n  );\r\n  const pageIndexParams = history.location.pathname.split(\r\n    '/'\r\n  );\r\n  const page = parseInt(\r\n    pageIndexParams[pageIndexParams.length - 1]\r\n  );\r\n\r\n  const pageIndex = page ? (page - 1) * LINKS_PER_PAGE : 0;\r\n\r\n  const {\r\n    data,\r\n    loading,\r\n    error,\r\n    subscribeToMore\r\n  } = useQuery(FEED_QUERY, {\r\n    variables: getQueryVariables(isNewPage, page)\r\n  });\r\n\r\n  subscribeToMore({\r\n    document: NEW_LINKS_SUBSCRIPTION,\r\n    updateQuery: (prev, { subscriptionData }) => {\r\n      if (!subscriptionData.data) return prev;\r\n      const newLink = subscriptionData.data.newLink;\r\n      const exists = prev.feed.links.find(\r\n        ({ id }) => id === newLink.id\r\n      );\r\n      if (exists) return prev;\r\n\r\n      return Object.assign({}, prev, {\r\n        feed: {\r\n          links: [newLink, ...prev.feed.links],\r\n          count: prev.feed.links.length + 1,\r\n          __typename: prev.feed.__typename\r\n        }\r\n      });\r\n    }\r\n  });\r\n\r\n  subscribeToMore({\r\n    document: NEW_VOTES_SUBSCRIPTION\r\n  });\r\n\r\n  return (\r\n    <>\r\n      {loading && <p>Loading...</p>}\r\n      {error && <pre>{JSON.stringify(error, null, 2)}</pre>}\r\n      {data && (\r\n        <>\r\n          {getLinksToRender(isNewPage, data).map(\r\n            (link, index) => (\r\n              <Link\r\n                key={link.id}\r\n                link={link}\r\n                index={index + pageIndex}\r\n              />\r\n            )\r\n          )}\r\n          {isNewPage && (\r\n            <div className=\"flex ml4 mv3 gray\">\r\n              <div\r\n                className=\"pointer mr2\"\r\n                onClick={() => {\r\n                  if (page > 1) {\r\n                    history.push(`/new/${page - 1}`);\r\n                  }\r\n                }}\r\n              >\r\n                Previous\r\n              </div>\r\n              <div\r\n                className=\"pointer\"\r\n                onClick={() => {\r\n                  if (\r\n                    page <=\r\n                    data.feed.count / LINKS_PER_PAGE\r\n                  ) {\r\n                    const nextPage = page + 1;\r\n                    history.push(`/new/${nextPage}`);\r\n                  }\r\n                }}\r\n              >\r\n                Next\r\n              </div>\r\n            </div>\r\n          )}\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LinkList;","import React, { useState } from 'react';\r\nimport { gql, useMutation } from '@apollo/client';\r\nimport { useHistory } from 'react-router';\r\nimport { LINKS_PER_PAGE } from '../constants';\r\nimport { FEED_QUERY } from './LinkList';\r\n\r\nconst CREATE_LINK_MUTATION = gql`\r\n  mutation PostMutation(\r\n    $description: String!\r\n    $url: String!\r\n  ) {\r\n    post(description: $description, url: $url) {\r\n      id\r\n      url\r\n      description\r\n    }\r\n  }\r\n`;\r\n\r\nconst CreateLink = () => {\r\n  const history = useHistory();\r\n  const [formState, setFormState] = useState({\r\n    description: '',\r\n    url: ''\r\n  });\r\n  const [createLink] = useMutation(CREATE_LINK_MUTATION, {\r\n    variables: {\r\n      description: formState.description,\r\n      url: formState.url\r\n    },\r\n    update: (cache, { data: { post } }) => {\r\n      const take = LINKS_PER_PAGE;\r\n      const skip = 0;\r\n      const orderBy = { createdAt: 'desc' };\r\n\r\n      const data = cache.readQuery({\r\n        query: FEED_QUERY,\r\n        variables: {\r\n          take,\r\n          skip,\r\n          orderBy\r\n        }\r\n      });\r\n\r\n      cache.writeQuery({\r\n        query: FEED_QUERY,\r\n        data: {\r\n          feed: {\r\n            links: [post, ...data.feed.links]\r\n          }\r\n        },\r\n        variables: {\r\n          take,\r\n          skip,\r\n          orderBy\r\n        }\r\n      });\r\n    },\r\n    onCompleted: () => history.push('/new/1')\r\n  });\r\n  return (\r\n    <div>\r\n      <form\r\n        onSubmit={(e) => {\r\n          e.preventDefault();\r\n          createLink();\r\n        }}\r\n      >\r\n        <div className=\"flex flex-column mt3\">\r\n          <input\r\n            className=\"mb2\"\r\n            value={formState.description}\r\n            onChange={(e) =>\r\n              setFormState({\r\n                ...formState,\r\n                description: e.target.value\r\n              })\r\n            }\r\n            type=\"text\"\r\n            placeholder=\"A description for the link\"\r\n          />\r\n          <input\r\n            className=\"mb2\"\r\n            value={formState.url}\r\n            onChange={(e) =>\r\n              setFormState({\r\n                ...formState,\r\n                url: e.target.value\r\n              })\r\n            }\r\n            type=\"text\"\r\n            placeholder=\"The URL for the link\"\r\n          />\r\n        </div>\r\n        <button type=\"submit\">Submit</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreateLink;\r\n","import React from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport { Link } from 'react-router-dom';\r\nimport { AUTH_TOKEN } from '../constants';\r\n\r\nconst Header = () => {\r\n  const history = useHistory();\r\n  const authToken = localStorage.getItem(AUTH_TOKEN);\r\n  return (\r\n    <div className=\"flex pa1 justify-between nowrap orange\">\r\n      <div className=\"flex flex-fixed black\">\r\n        <div className=\"fw7 mr1\">Hacker News</div>\r\n        <Link to=\"/\" className=\"ml1 no-underline black\">\r\n          new\r\n        </Link>\r\n        <div className=\"ml1\">|</div>\r\n        <Link to=\"/top\" className=\"ml1 no-underline black\">\r\n          top\r\n        </Link>\r\n        <div className=\"ml1\">|</div>\r\n        <Link\r\n          to=\"/search\"\r\n          className=\"ml1 no-underline black\"\r\n        >\r\n          search\r\n        </Link>\r\n        {authToken && (\r\n          <div className=\"flex\">\r\n            <div className=\"ml1\">|</div>\r\n            <Link\r\n              to=\"/create\"\r\n              className=\"ml1 no-underline black\"\r\n            >\r\n              submit\r\n            </Link>\r\n          </div>\r\n        )}\r\n      </div>\r\n      <div className=\"flex flex-fixed\">\r\n        {authToken ? (\r\n          <div\r\n            className=\"ml1 pointer black\"\r\n            onClick={() => {\r\n              localStorage.removeItem(AUTH_TOKEN);\r\n              history.push(`/`);\r\n            }}\r\n          >\r\n            logout\r\n          </div>\r\n        ) : (\r\n          <Link\r\n            to=\"/login\"\r\n            className=\"ml1 no-underline black\"\r\n          >\r\n            login\r\n          </Link>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;","import React, { useState } from 'react';\r\nimport { gql, useMutation } from '@apollo/client';\r\nimport { useHistory } from 'react-router';\r\nimport { AUTH_TOKEN } from '../constants';\r\n\r\nconst SIGNUP_MUTATION = gql`\r\n  mutation SignupMutation(\r\n    $email: String!\r\n    $password: String!\r\n    $name: String!\r\n  ) {\r\n    signup(\r\n      email: $email\r\n      password: $password\r\n      name: $name\r\n    ) {\r\n      token\r\n    }\r\n  }\r\n`;\r\n\r\nconst LOGIN_MUTATION = gql`\r\n  mutation LoginMutation(\r\n    $email: String!\r\n    $password: String!\r\n  ) {\r\n    login(email: $email, password: $password) {\r\n      token\r\n    }\r\n  }\r\n`;\r\n\r\nconst Login = () => {\r\n  const history = useHistory();\r\n  const [formState, setFormState] = useState({\r\n    login: true,\r\n    email: '',\r\n    password: '',\r\n    name: ''\r\n  });\r\n\r\n  const [login] = useMutation(LOGIN_MUTATION, {\r\n    variables: {\r\n      email: formState.email,\r\n      password: formState.password\r\n    },\r\n    onCompleted: ({ login }) => {\r\n      localStorage.setItem(AUTH_TOKEN, login.token);\r\n      history.push('/');\r\n    }\r\n  });\r\n\r\n  const [signup] = useMutation(SIGNUP_MUTATION, {\r\n    variables: {\r\n      name: formState.name,\r\n      email: formState.email,\r\n      password: formState.password\r\n    },\r\n    onCompleted: ({ signup }) => {\r\n      localStorage.setItem(AUTH_TOKEN, signup.token);\r\n      history.push('/');\r\n    }\r\n  });\r\n  return (\r\n    <div>\r\n      <h4 className=\"mv3\">{login ? 'Login' : 'Sign Up'}</h4>\r\n      <div className=\"flex flex-column\">\r\n        {!formState.login && (\r\n          <input\r\n            value={formState.name}\r\n            onChange={(e) =>\r\n              setFormState({\r\n                ...formState,\r\n                name: e.target.value\r\n              })\r\n            }\r\n            type=\"text\"\r\n            placeholder=\"Your name\"\r\n          />\r\n        )}\r\n        <input\r\n          value={formState.email}\r\n          onChange={(e) =>\r\n            setFormState({\r\n              ...formState,\r\n              email: e.target.value\r\n            })\r\n          }\r\n          type=\"text\"\r\n          placeholder=\"Your email address\"\r\n        />\r\n        <input\r\n          value={formState.password}\r\n          onChange={(e) =>\r\n            setFormState({\r\n              ...formState,\r\n              password: e.target.value\r\n            })\r\n          }\r\n          type=\"password\"\r\n          placeholder=\"Choose a safe password\"\r\n        />\r\n      </div>\r\n      <div className=\"flex mt3\">\r\n        <button\r\n          className=\"pointer mr2 button\"\r\n          onClick={formState.login ? login : signup}\r\n        >\r\n          {formState.login ? 'login' : 'create account'}\r\n        </button>\r\n        <button\r\n          className=\"pointer button\"\r\n          onClick={(e) =>\r\n            setFormState({\r\n              ...formState,\r\n              login: !formState.login\r\n            })\r\n          }\r\n        >\r\n          {formState.login\r\n            ? 'need to create an account?'\r\n            : 'already have an account?'}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import React, { useState } from 'react';\r\nimport { useLazyQuery } from '@apollo/client';\r\nimport gql from 'graphql-tag';\r\nimport Link from './Link';\r\n\r\nconst FEED_SEARCH_QUERY = gql`\r\n  query FeedSearchQuery($filter: String!) {\r\n    feed(filter: $filter) {\r\n      id\r\n      links {\r\n        id\r\n        url\r\n        description\r\n        postedBy {\r\n          id\r\n          name\r\n        }\r\n        votes {\r\n          id\r\n          user {\r\n            id\r\n          }\r\n        }\r\n        createdAt\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst Search = () => {\r\n  const [searchFilter, setSearchFilter] = useState('');\r\n  const [executeSearch, { data }] = useLazyQuery(\r\n    FEED_SEARCH_QUERY\r\n  );\r\n  return (\r\n    <>\r\n      <div>\r\n        Search\r\n        <input\r\n          type=\"text\"\r\n          onChange={(e) => setSearchFilter(e.target.value)}\r\n        />\r\n        <button\r\n          onClick={() =>\r\n            executeSearch({\r\n              variables: { filter: searchFilter }\r\n            })\r\n          }\r\n        >\r\n          OK\r\n        </button>\r\n      </div>\r\n      {data &&\r\n        data.feed.links.map((link, index) => (\r\n          <Link key={link.id} link={link} index={index} />\r\n        ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Search;","import React from 'react';\nimport { Redirect, Route, Switch } from 'react-router-dom';\nimport CreateLink from './CreateLink';\nimport Header from './Header';\nimport LinkList from './LinkList';\nimport Login from './Login';\nimport Search from './Search';\n\nconst App = () => (\n  <div className=\"center w85\">\n    <Header />\n    <div className=\"ph3 pv1 background-gray\">\n      <Switch>\n        <Route\n          exact\n          path=\"/\"\n          render={() => <Redirect to=\"/new/1\" />}\n        />\n\n        <Route\n          exact\n          path=\"/create\"\n          component={CreateLink}\n        />\n        <Route exact path=\"/login\" component={Login} />\n        <Route exact path=\"/search\" component={Search} />\n        <Route exact path=\"/top\" component={LinkList} />\n        <Route\n          exact\n          path=\"/new/:page\"\n          component={LinkList}\n        />\n      </Switch>\n    </div>\n  </div>\n);\n\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.1/8 is considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\r\n      ),\r\n  )\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config)\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit http://bit.ly/CRA-PWA',\r\n            )\r\n          })\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config)\r\n        }\r\n      })\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing\r\n          if (installingWorker == null) {\r\n            return\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\r\n                )\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration)\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.')\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration)\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error)\r\n      })\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type')\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload()\r\n            })\r\n          })\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config)\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.',\r\n        )\r\n      })\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready.then(registration => {\r\n        registration.unregister()\r\n      })\r\n    }\r\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport {\n  ApolloClient,\n  ApolloProvider,\n  createHttpLink,\n  InMemoryCache,\n  split\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport { WebSocketLink } from '@apollo/client/link/ws';\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport App from './Components/App';\nimport { AUTH_TOKEN } from './constants';\nimport * as serviceWorker from './serviceWorker';\nimport './Styles/index.css';\n\nconst httpLink = createHttpLink({\n  uri: 'http://localhost:4000'\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem(AUTH_TOKEN);\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : ''\n    }\n  };\n});\n\nconst wsLink = new WebSocketLink({\n  uri: `ws://localhost:4000/graphql`,\n  options: {\n    reconnect: true,\n    connectionParams: {\n      authToken: localStorage.getItem(AUTH_TOKEN)\n    }\n  }\n});\n\nconst link = split(\n  ({ query }) => {\n    const { kind, operation } = getMainDefinition(query);\n    return (\n      kind === 'OperationDefinition' &&\n      operation === 'subscription'\n    );\n  },\n  wsLink,\n  authLink.concat(httpLink)\n);\n\nconst client = new ApolloClient({\n  link,\n  cache: new InMemoryCache()\n});\n\nReactDOM.render(\n  <BrowserRouter>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}